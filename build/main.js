/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/script.js":
/*!**************************!*\
  !*** ./src/js/script.js ***!
  \**************************/
/***/ (() => {

eval("class TodoList {\r\n  constructor() {\r\n    this.ul = document.querySelector('#todo ul');\r\n    this.newTodo = document.querySelector('#new-todo');\r\n    this.card = document.querySelector('.card');\r\n    this.span = document.querySelector('.card span');\r\n    this.all = document.querySelector('#all');\r\n    this.active = document.querySelector('#active');\r\n    this.completed = document.querySelector('#completed');\r\n    this.toggleAll = document.querySelector('.toggle-all');\r\n    this.cleanCompleted = document.querySelector('.Clear-completed');\r\n    this.isAllSelected = 0;\r\n\r\n    this.arrList = []; // 保存所有任务\r\n    this.count = 0; // 任务数\r\n    this.flag = 2; // 区分正常插入的 update 和 drag 的 update\r\n    this.lis = []; //捕获当前ul中li的顺序\r\n    // 从本地存储加载数据\r\n    this.loadFromLocalStorage();\r\n    this.init();\r\n    this.parsedData;\r\n  }\r\n\r\n  init() {\r\n    // 监听输入框，添加要做的任务\r\n    this.newTodo.addEventListener('keyup', (e) => {\r\n      if (e.keyCode == 13) {\r\n        if (this.newTodo.value !== '') {\r\n          this.addList(this.newTodo.value);\r\n          this.newTodo.value = '';\r\n          this.card.classList.replace('hideCard', 'showCard');\r\n          this.span.innerHTML = this.count + ' items left';\r\n          if (this.all.checked) {\r\n            this.showAll();\r\n          }\r\n          if (this.active.checked) {\r\n            this.showActive();\r\n          }\r\n          if (this.completed.checked) {\r\n            this.showCompleted();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // 监听任务被删除、完成、未完成\r\n    this.ul.addEventListener('click', (e) => {\r\n      this.change(e);\r\n      if (this.all.checked) {\r\n        this.showAll();\r\n      }\r\n      if (this.active.checked) {\r\n        this.showActive();\r\n      }\r\n      if (this.completed.checked) {\r\n        this.showCompleted();\r\n      }\r\n    });\r\n\r\n    // 实现拖拽变换顺序功能\r\n    let dragged;\r\n\r\n    this.ul.addEventListener('dragstart', (e) => {\r\n      this.lis = Array.from(this.ul.getElementsByTagName('li'));\r\n      dragged = e.target;\r\n      this.arrList.find(item => item.li === dragged).time !== null ? this.flag = 1 : this.flag = 2;\r\n      e.target.style.opacity = '0.8';\r\n    });\r\n\r\n    this.ul.addEventListener('dragover', (e) => {\r\n      e.preventDefault(); //阻止事件的默认行为\r\n    });\r\n\r\n    this.ul.addEventListener('drop', (e) => {\r\n      const target = e.target.closest('li');\r\n      const bounding = target.getBoundingClientRect();\r\n\r\n      if (e.clientY - bounding.y > bounding.height / 2) {\r\n        if (target.nextSibling !== dragged) {\r\n          this.ul.insertBefore(dragged, target.nextSibling);\r\n          this.updateList();\r\n        }\r\n      } else {\r\n        if (target !== dragged) {\r\n          this.ul.insertBefore(dragged, target);\r\n          this.updateList();\r\n        }\r\n      }\r\n    });\r\n\r\n    this.ul.addEventListener('dragend', (e) => {\r\n      e.target.style.opacity = '1';\r\n      this.flag = 0;\r\n    });\r\n\r\n    this.all.addEventListener('click', () => this.showAll());\r\n\r\n    this.active.addEventListener('click', () => this.showActive());\r\n\r\n    this.completed.addEventListener('click', () => this.showCompleted());\r\n\r\n    this.cleanCompleted.addEventListener('click', () => this.clearCompleted());\r\n\r\n    this.toggleAll.addEventListener('click', () => {\r\n      this.isAllSelected === 1 ? this.removeAll() : this.selectAll();\r\n    });\r\n  }\r\n\r\n  change(e) {\r\n    if (e.target.localName === 'button') {\r\n      const i = this.arrList.findIndex((item) => item.li === e.target.parentNode);\r\n      // 若点击button要删除的任务是未完成的，则count数也要减一\r\n      if (!e.target.parentNode.children[0].checked) {\r\n        this.count--;\r\n        this.span.innerHTML = this.count + ' items left';\r\n      }\r\n      this.arrList.splice(i, 1);\r\n      e.target.parentNode.parentNode.removeChild(e.target.parentNode);\r\n      if (this.arrList.length === 0) {\r\n        this.card.classList.replace('showCard', 'hideCard');\r\n      }\r\n      this.saveToLocalStorage();\r\n    } else if (e.target.localName === 'input') {\r\n      // 若点击的是input，则判断任务是否完成\r\n      if (e.target.checked) {\r\n        e.target.parentNode.classList.add('check');\r\n        e.target.parentNode.classList.replace('unfinished', 'finished');\r\n        this.count--;\r\n        this.span.innerHTML = this.count + ' items left';\r\n      } else {\r\n        e.target.parentNode.classList.remove('check');\r\n        e.target.parentNode.classList.add('removeCheck');\r\n        e.target.parentNode.classList.replace('finished', 'unfinished');\r\n        this.count++;\r\n        this.span.innerHTML = this.count + ' items left';\r\n      }\r\n      this.saveToLocalStorage();\r\n    }\r\n  }\r\n\r\n  // 从本地存储加载数据\r\n  loadFromLocalStorage() {\r\n    const data = localStorage.getItem('todoList');\r\n    if (data) {\r\n      this.parsedData = JSON.parse(data);\r\n      this.parsedData.forEach(item => this.addList(item.label));\r\n      this.newTodo.value = '';\r\n      this.card.classList.replace('hideCard', 'showCard');\r\n      this.span.innerHTML = this.count + ' items left';\r\n    }\r\n  }\r\n\r\n  // 保存数据到本地存储\r\n  saveToLocalStorage() {\r\n    const dataToSave = this.arrList.map(item => {\r\n      return { label: item.li.querySelector('label').innerText };\r\n    });\r\n    localStorage.setItem('todoList', JSON.stringify(dataToSave));\r\n  }\r\n\r\n  addList(val) {\r\n    let li = document.createElement('li');\r\n    li.classList.add('box');\r\n    li.classList.add('list');\r\n    li.classList.add('unfinished');\r\n    let content = `\r\n        <input type=\"checkbox\" class=\"toggle\"></input>\r\n        <label>${val}</label>\r\n        <button>x</button>\r\n      `;\r\n    li.innerHTML = content;\r\n    li.setAttribute('draggable', 'true'); // 添加可拖拽属性\r\n    // 正则提取时间并排序\r\n    const regex = /(\\d{1,2}:\\d{1,2})/g;\r\n    let matches = val.match(regex);\r\n    if (matches) {\r\n      const time = matches[0];\r\n      const timeSplit = time.split(':');\r\n\r\n      let timeObj = null;\r\n\r\n      if (timeSplit.length === 2) {\r\n        const hours = parseInt(timeSplit[0]);\r\n        const minutes = parseInt(timeSplit[1]);\r\n\r\n        if (!isNaN(hours) && !isNaN(minutes)) {\r\n          timeObj = new Date();\r\n          timeObj.setHours(hours);\r\n          timeObj.setMinutes(minutes);\r\n        }\r\n      }\r\n      this.arrList.push({ li: li, time: timeObj });\r\n    } else this.arrList.push({ li: li, time: null });\r\n    this.flag = 0;\r\n    this.count++;\r\n    this.updateList();\r\n    this.saveToLocalStorage();// 在添加任务时保存到本地存储\r\n  }\r\n\r\n  updateList() {\r\n    let timeList = [];\r\n    let normalList = [];\r\n    if (this.flag === 1) {\r\n      // 创建一个新的数组，按照 lis 中的顺序填充\r\n      const newArrList = this.lis.map((li) => {\r\n        const index = this.arrList.findIndex((item) => item.li === li);\r\n        return this.arrList[index];\r\n      });\r\n      // 将 arrList 更新为新的排序后的数组\r\n      this.arrList = newArrList;\r\n    }\r\n    else if (this.flag === 2) {\r\n      this.lis = Array.from(this.ul.getElementsByTagName('li'));\r\n      const newArrList = this.lis.map((li) => {\r\n        const index = this.arrList.findIndex((item) => item.li === li);\r\n        return this.arrList[index];\r\n      });\r\n      // 将 arrList 更新为新的排序后的数组\r\n      this.arrList = newArrList;\r\n    }\r\n    this.arrList.forEach(item => {\r\n      if (item.time) timeList.push(item);\r\n      else normalList.push(item);\r\n    });\r\n    timeList.sort((a, b) => {\r\n      return a.time && b.time ? a.time.getTime() - b.time.getTime() : 0;\r\n    });\r\n    this.ul.innerHTML = '';\r\n    timeList.forEach(item => {\r\n      this.ul.appendChild(item.li);\r\n    });\r\n\r\n    normalList.forEach(item => this.ul.appendChild(item.li));\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // unfinished代表未完成的任务\r\n  // finished代表已完成的任务\r\n  // unfinishedHide代表隐藏未完成的任务\r\n  // finishedHide代表隐藏已完成的任务\r\n\r\n  showAll() {\r\n    this.updateList();\r\n    this.arrList.forEach(item => {\r\n      item.li.classList.replace('finishedHide', 'finished');\r\n      item.li.classList.replace('unfinishedHide', 'unfinished');\r\n    });\r\n  }\r\n\r\n  showActive() {\r\n    this.updateList();\r\n    this.arrList.forEach(item => {\r\n      item.li.classList.replace('unfinishedHide', 'unfinished');\r\n      item.li.classList.replace('finished', 'finishedHide');\r\n    });\r\n  }\r\n\r\n  showCompleted() {\r\n    this.updateList();\r\n    this.arrList.forEach(item => {\r\n      item.li.classList.replace('finishedHide', 'finished');\r\n      item.li.classList.replace('unfinished', 'unfinishedHide');\r\n    });\r\n  }\r\n\r\n  selectAll() {\r\n    this.arrList.forEach(item => {\r\n      if (!item.li.children[0].checked) {\r\n        item.li.children[0].checked = true;\r\n        item.li.classList.add('check');\r\n        item.li.classList.replace('unfinished', 'finished');\r\n        this.count--;\r\n        this.span.innerHTML = this.count + ' items left';\r\n        this.isAllSelected = 1;\r\n      }\r\n    });\r\n  }\r\n\r\n  removeAll() {\r\n    this.arrList.forEach(item => {\r\n      if (item.li.children[0].checked) {\r\n        item.li.children[0].checked = false;\r\n        item.li.classList.remove('check');\r\n        item.li.classList.add('removeCheck');\r\n        item.li.classList.replace('finished', 'unfinished');\r\n        this.count++;\r\n        this.span.innerHTML = this.count + ' items left';\r\n        this.isAllSelected = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  clearCompleted() {\r\n    this.updateList();\r\n    const indexesToRemove = []; //先统一收集所有已完成li\r\n    this.arrList.forEach((item, index) => {\r\n      if (item.li.children[0].checked) {\r\n        indexesToRemove.push(index);\r\n        item.li.parentNode.removeChild(item.li);\r\n      }\r\n    });\r\n    indexesToRemove.reverse().forEach(index => this.arrList.splice(index, 1));\r\n    this.saveToLocalStorage();\r\n  }\r\n}\r\n\r\nconst todoList = new TodoList();\r\n\n\n//# sourceURL=webpack://todolistmvc/./src/js/script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/script.js"]();
/******/ 	
/******/ })()
;